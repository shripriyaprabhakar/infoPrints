{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\nvar coerceEntry, coerceQuery, coerceQueryKey, coerceQueryValue, key_map, makeUrl, request, search, unique, xml2js;\nrequest = require('request');\nxml2js = require('xml2js');\n\nmakeUrl = function makeUrl(query, max_results, sort_by) {\n  if (max_results == null) {\n    max_results = 1000;\n  }\n\n  if (sort_by == null) {\n    sort_by = 'submittedDate';\n  }\n\n  return \"http://export.arxiv.org/api/query?sortBy=\" + sort_by + \"&max_results=\" + max_results + \"&search_query=\" + query;\n};\n\nkey_map = {\n  author: 'au',\n  q: 'all',\n  title: 'ti',\n  category: 'cat'\n};\n\ncoerceQueryKey = function coerceQueryKey(key) {\n  return key_map[key] || key;\n};\n\ncoerceQueryValue = function coerceQueryValue(key, value) {\n  var matched;\n\n  if (key === 'au') {\n    if (matched = value.match(/^(\\w+).* (\\w+)$/)) {\n      return matched[2] + '_' + matched[1][0];\n    } else {\n      return value;\n    }\n  } else {\n    return value;\n  }\n};\n\ncoerceQuery = function coerceQuery(query) {\n  var k, querys, v;\n  querys = [];\n\n  for (k in query) {\n    v = query[k];\n    k = coerceQueryKey(k);\n    v = coerceQueryValue(k, v);\n    querys.push([k, v].join(':'));\n  }\n\n  return querys.join('+AND+');\n};\n\nunique = function unique(a, k) {\n  var a_, i, j, known, len;\n  a_ = [];\n  known = {};\n\n  for (j = 0, len = a.length; j < len; j++) {\n    i = a[j];\n\n    if (!known[i[k]]) {\n      known[i[k]] = true;\n      a_.push(i);\n    }\n  }\n\n  return a_;\n};\n\ncoerceEntry = function coerceEntry(entry) {\n  return {\n    id: entry.id[0],\n    updated: new Date(entry.updated[0]),\n    published: new Date(entry.published[0]),\n    title: entry.title[0].trim().replace(/\\s+/g, ' '),\n    summary: entry.summary[0].trim().replace(/\\s+/g, ' '),\n    links: entry.link.map(function (link) {\n      return {\n        href: link['$']['href'],\n        title: link['$']['title']\n      };\n    }),\n    authors: unique(entry.author.map(function (author) {\n      return {\n        name: author['name'][0]\n      };\n    }), 'name'),\n    categories: entry.category.map(function (category) {\n      return category['$']['term'];\n    })\n  };\n};\n\nsearch = function search(query, cb) {\n  return request.get(makeUrl(coerceQuery(query)), function (err, resp, data) {\n    return xml2js.parseString(data, function (err, parsed) {\n      var items, ref, ref1, total;\n\n      if (err != null) {\n        return cb(err);\n      } else {\n        items = parsed != null ? (ref = parsed.feed) != null ? (ref1 = ref.entry) != null ? ref1.map(coerceEntry) : void 0 : void 0 : void 0;\n        items || (items = []);\n        total = Number(parsed.feed['opensearch:totalResults'][0]['_']);\n        total || (total = 0);\n        return cb(err, {\n          items: items,\n          total: total\n        });\n      }\n    });\n  });\n};\n\nmodule.exports = {\n  search: search\n};","map":null,"metadata":{},"sourceType":"script"}